set nocompatible
set shell=/bin/sh

" Vundle configuration
" =======================================================================
   filetype off                   " required!
   set rtp+=~/.vim/bundle/Vundle.vim/
   call vundle#begin()

   "" plugins on GitHub
   Plugin 'Lokaltog/vim-easymotion'
   Plugin 'milkypostman/vim-togglelist'
   Plugin 'vim-scripts/The-NERD-Commenter'
   Plugin 'sublazy/vim-zmq-coding-style'
   let g:zmqsty_patterns = []

   "" plugins from http://vim-scripts.org/vim/scripts.html
   Bundle 'L9'
   Bundle 'FuzzyFinder'
   Bundle 'bufkill.vim'
   Bundle 'bufferlist.vim'
   Bundle 'grep.vim'

   call vundle#end()            " required
   filetype plugin indent on    " required
   " To ignore plugin indent changes, instead use:
   " filetype plugin on
   "
   " Brief help
   " :PluginList       - lists configured plugins
   " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
   " :PluginSearch foo - searches for foo; append `!` to refresh local cache
   " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
   "
   " see :h vundle for more details or wiki for FAQ
" =======================================================================

" From vimrc_example
" =====================================================================
    " allow backspacing over everything in insert mode
    set backspace=indent,eol,start

    set history=50		" keep 50 lines of command line history
    set ruler			" show the cursor position all the time
    set showcmd			" display incomplete commands
    set incsearch		" do incremental searching
    set hlsearch                " highlight search results

   " CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
   " so that you can undo CTRL-U after inserting a line break.
   inoremap <C-U> <C-G>u<C-U>

    if has('mouse')
      set mouse=a
    endif

    " Only do this part when compiled with support for autocommands.
    if has("autocmd")

      " Enable file type detection.
      " Use the default filetype settings, so that mail gets 'textwidth' set to 72,
      " 'cindent' is on in C files, etc.
      " Also load indent files, to automatically do language-dependent indenting.
      filetype plugin indent on

      " Put these in an autocmd group, so that we can delete them easily.
      augroup vimrcEx
      au!

      "      " For all text files set 'textwidth' to 78 characters.
      "      autocmd FileType text setlocal textwidth=78

      " When editing a file, always jump to the last known cursor position.
      " Don't do it when the position is invalid or when inside an event handler
      " (happens when dropping a file on gvim).
      " Also don't do it when the mark is in the first line, that is the default
      " position when opening a file.
      autocmd BufReadPost *
	\ if line("'\"") > 1 && line("'\"") <= line("$") |
	\   exe "normal! g`\"" |
	\ endif

      augroup END

    else

      set autoindent		" always set autoindenting on

    endif " has("autocmd")

    " Convenient command to see the difference between the current buffer and the
    " file it was loaded from, thus the changes you made.
    " Only define it when not defined already.
    if !exists(":DiffOrig")
      command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		      \ | wincmd p | diffthis
    endif
" =====================================================================

" Gives some margin lines when scrolling up/down with cursor.
set scrolloff=3
set smartindent

" set textwidth=80
" set columns=90

" Don't break lines in the middle of a word.
set linebreak

set formatoptions=tcq1

set noexpandtab        " don't convert tabs to spaces.
set smarttab
set tabstop=4
set softtabstop=4
set shiftwidth=4

syntax enable
"let g:solarized_termcolors=256
"set t_Co=256	" Terminal colors
set background=dark
"colorscheme solarized
"colorscheme pablo
"colorscheme cs

"if &term = "screen"
"	let &t_SI = "\<Esc>]12;purple\x7"
"	let &t_EI = "\<Esc>]12;blue\x7"
"endif
" Highlight current line in INSERT mode
autocmd InsertEnter,InsertLeave * set cul!


" Show trailing whitepace and spaces before a tab:
"autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/

autocmd Syntax * syn match ExtraWhitespace /\s\+$/
set hidden

"function! Rtw()
"	    %s/\s\+$//e
"endfunction

command! Rtw %s/\s\+$//e

" svn blame selected lines
" todo: change "gl" shortcut to "Blame" command
vmap gl :<C-U>!svn blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>

set number
set showbreak=------>\  " line up soft-wrap prefix with the line numbers
set cpoptions+=n        " start soft-wrap lines (and any prefix) in the line-number area

" Paragraph formatting program
" set formatprg=par\ -w85

set nobackup
set noswapfile

set ignorecase
set smartcase

" Source the vimrc file after saving it
if has("autocmd")
    if !exists("autocommands_loaded")
        let autocommands_loaded = 1
        autocmd bufwritepost .vimrc source $MYVIMRC
    endif
endif

" Open command line without Shift key.
nnoremap ; :

" Stay on searched word
nnoremap * *N

",v shortcut for editing vimrc
let mapleader = ","
nmap <leader>v :split $MYVIMRC<CR>
nmap <leader>fi :set formatoptions+=a<CR>
nmap <leader>fo :set formatoptions-=a<CR>
nmap <leader>q :q!<CR>
nmap <leader>x :x<CR>

nmap <SPACE>fs :w!<CR>

" FuzzyFinder shortcuts
nmap <leader>ff :FufFile<CR>
nmap <leader>fb :FufBuffer<CR>
nmap <leader>fd :FufDir<CR>
nmap <leader>fl :FufLine<CR>
nmap <leader>fh :FufHelp<CR>
nmap <leader>fr :FufCoverageFile<CR>
let g:fuf_enumeratingLimit = 20
"nnoremap <silent> <C-]> :FufBufferTagAllWithCursorWord!<CR>
"vnoremap <silent> <C-]> :FufBufferTagAllWithSelectedText!<CR>

" BufferList config
"= NEEDED:
nmap <leader>bb :call BufferList()<CR>
"= OPTIONAL:
let g:BufferListWidth = 20
let g:BufferListMaxWidth = 40
hi BufferSelected term=NONE ctermfg=white ctermbg=blue cterm=bold
hi BufferNormal term=NONE ctermfg=white ctermbg=black cterm=NONE

" Grep.vim config
nnoremap <silent> <F3> :Rgrep -i -w<CR>
let Grep_Default_Filelist = '*.c *.h'
let Grep_Default_Options = ''
let Grep_Skip_Dirs = 'svn'

" vim-togglelist config
let g:toggle_list_no_mappings = 1
nmap <silent> <F2> :call ToggleQuickfixList()<CR>
nmap <silent> <leader>l :call ToggleLocationList()<CR>

inoremap <silent> <F1> <esc>

" Moving in quickfix window
nnoremap <silent> <F5> :cp<CR>
nnoremap <silent> <F6> :cn<CR>

" Bubble single lines
nmap <C-Up> ddkP
nmap <C-Down> ddp
" Bubble multiple lines
vmap <C-Up> xkP'[V']
vmap <C-Down> xp'[V']

" Go from a function body to its name (go name)
nmap gn [[kf(b

command! Sec execute "normal O\<Esc>0D74I=\<Esc>A */\<Esc>I * \<Esc>O\<Esc>0DI/*  "

set cm=blowfish

if filereadable("vimrc.local")
	source vimrc.local
endif
